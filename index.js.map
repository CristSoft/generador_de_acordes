{
  "version": 3,
  "sources": ["../node_modules/@thi.ng/random/arandom.js", "../node_modules/@thi.ng/random/wrapped.js", "../node_modules/@thi.ng/random/system.js", "../node_modules/@thi.ng/colored-noise/api.js", "../node_modules/@thi.ng/colored-noise/utils.js", "../node_modules/@thi.ng/colored-noise/blue.js", "../node_modules/@thi.ng/colored-noise/green.js", "../node_modules/@thi.ng/binary/count.js", "../node_modules/@thi.ng/colored-noise/pink.js", "../node_modules/@thi.ng/colored-noise/red.js", "../node_modules/@thi.ng/colored-noise/violet.js", "../node_modules/@thi.ng/colored-noise/white.js", "../node_modules/@thi.ng/checks/implements-function.js", "../node_modules/@thi.ng/transducers/ensure.js", "../node_modules/@thi.ng/checks/is-iterable.js", "../node_modules/@thi.ng/api/fn.js", "../node_modules/@thi.ng/transducers/reduced.js", "../node_modules/@thi.ng/transducers/reduce.js", "../node_modules/@thi.ng/transducers/push.js", "../node_modules/@thi.ng/transducers/iterator.js", "../node_modules/@thi.ng/transducers/compr.js", "../node_modules/@thi.ng/transducers/take.js", "../node_modules/@logue/reverb/dist/Reverb.es.js", "../src/sound_font_synth.ts", "../src/index.ts"],
  "sourcesContent": ["const INV_MAX = 1 / 2 ** 32;\nclass ARandom {\n  float(norm = 1) {\n    return this.int() * INV_MAX * norm;\n  }\n  probability(p) {\n    return this.float() < p;\n  }\n  norm(norm = 1) {\n    return (this.int() * INV_MAX - 0.5) * 2 * norm;\n  }\n  normMinMax(min, max) {\n    const x = this.minmax(min, max);\n    return this.float() < 0.5 ? x : -x;\n  }\n  minmax(min, max) {\n    return this.float() * (max - min) + min;\n  }\n  minmaxInt(min, max) {\n    min |= 0;\n    const range = (max | 0) - min;\n    return range ? min + this.int() % range : min;\n  }\n  minmaxUint(min, max) {\n    min >>>= 0;\n    const range = (max >>> 0) - min;\n    return range ? min + this.int() % range : min;\n  }\n}\nexport {\n  ARandom\n};\n", "import { ARandom } from \"./arandom.js\";\nclass WrappedRandom extends ARandom {\n  constructor(rnd) {\n    super();\n    this.rnd = rnd;\n  }\n  float(norm = 1) {\n    return this.rnd() * norm;\n  }\n  norm(norm = 1) {\n    return (this.rnd() - 0.5) * 2 * norm;\n  }\n  int() {\n    return this.rnd() * 4294967296 >>> 0;\n  }\n}\nexport {\n  WrappedRandom\n};\n", "import { WrappedRandom } from \"./wrapped.js\";\nconst SYSTEM = new WrappedRandom(Math.random);\nexport {\n  SYSTEM\n};\n", "import { SYSTEM } from \"@thi.ng/random/system\";\nconst DEFAULT_OPTS = {\n  bins: 2,\n  scale: 1,\n  rnd: SYSTEM\n};\nexport {\n  DEFAULT_OPTS\n};\n", "const preseed = (n, scale, rnd) => {\n  const state = new Array(n);\n  for (let i = 0; i < n; i++) {\n    state[i] = rnd.norm(scale);\n  }\n  return state;\n};\nconst sum = (src) => src.reduce((sum2, x) => sum2 + x, 0);\nfunction* interleave(a, b) {\n  const src = [a[Symbol.iterator](), b[Symbol.iterator]()];\n  for (let i = 0; true; i ^= 1) {\n    const next = src[i].next();\n    if (next.done) return;\n    yield next.value;\n  }\n}\nexport {\n  interleave,\n  preseed,\n  sum\n};\n", "import { DEFAULT_OPTS } from \"./api.js\";\nimport { preseed, sum } from \"./utils.js\";\nfunction* blue(opts) {\n  const { bins, scale, rnd } = { ...DEFAULT_OPTS, ...opts };\n  const state = preseed(bins, scale, rnd);\n  state.forEach((x, i) => state[i] = i & 1 ? x : -x);\n  const invN = 1 / bins;\n  let acc = sum(state);\n  for (let i = 0, sign = -1; true; ++i >= bins && (i = 0)) {\n    acc -= state[i];\n    acc += state[i] = sign * rnd.norm(scale);\n    sign ^= 4294967294;\n    yield sign * acc * invN;\n  }\n}\nexport {\n  blue\n};\n", "import { blue } from \"./blue.js\";\nimport { interleave } from \"./utils.js\";\nconst green = (opts) => interleave(blue(opts), blue(opts));\nexport {\n  green\n};\n", "const popCount = (x) => (x = x - (x >>> 1 & 1431655765), x = (x & 858993459) + (x >>> 2 & 858993459), (x + (x >>> 4) & 252645135) * 16843009 >>> 24);\nconst popCountArray = (data, start = 0, n = data.length) => {\n  let num = 0;\n  for (let end = start + n; start < end; start++) {\n    const x = data[start];\n    x > 0 && (num += popCount(x));\n  }\n  return num;\n};\nconst hammingDist = (x, y) => popCount(x ^ y);\nconst clz32 = (x) => x !== 0 ? 31 - (Math.log(x >>> 0) / Math.LN2 | 0) : 32;\nconst ctz32 = (x) => {\n  let c = 32;\n  x &= -x;\n  x && c--;\n  x & 65535 && (c -= 16);\n  x & 16711935 && (c -= 8);\n  x & 252645135 && (c -= 4);\n  x & 858993459 && (c -= 2);\n  x & 1431655765 && (c -= 1);\n  return c;\n};\nconst bitSize = (x) => x > 1 ? Math.ceil(Math.log2(x)) : 0;\nexport {\n  bitSize,\n  clz32,\n  ctz32,\n  hammingDist,\n  popCount,\n  popCountArray\n};\n", "import { ctz32 } from \"@thi.ng/binary/count\";\nimport { DEFAULT_OPTS } from \"./api.js\";\nimport { preseed, sum } from \"./utils.js\";\nfunction* pink(opts) {\n  const { bins = 8, scale, rnd } = { ...DEFAULT_OPTS, ...opts };\n  const state = preseed(bins, scale, rnd);\n  const invN = 1 / bins;\n  let acc = sum(state);\n  for (let i = 0; true; i = i + 1 >>> 0) {\n    const id = ctz32(i) % bins;\n    acc -= state[id];\n    acc += state[id] = rnd.norm(scale);\n    yield acc * invN;\n  }\n}\nexport {\n  pink\n};\n", "import { DEFAULT_OPTS } from \"./api.js\";\nimport { preseed, sum } from \"./utils.js\";\nfunction* red(opts) {\n  const { bins, scale, rnd } = { ...DEFAULT_OPTS, ...opts };\n  const state = preseed(bins, scale, rnd);\n  const invN = 1 / bins;\n  let acc = sum(state);\n  for (let i = 0; true; ++i >= bins && (i = 0)) {\n    acc -= state[i];\n    acc += state[i] = rnd.norm(scale);\n    yield acc * invN;\n  }\n}\nexport {\n  red\n};\n", "import { red } from \"./red.js\";\nimport { interleave } from \"./utils.js\";\nconst violet = (opts) => interleave(red(opts), red(opts));\nexport {\n  violet\n};\n", "import { DEFAULT_OPTS } from \"./api.js\";\nfunction* white(opts) {\n  const { scale, rnd } = { ...DEFAULT_OPTS, ...opts };\n  while (true) {\n    yield rnd.norm(scale);\n  }\n}\nexport {\n  white\n};\n", "const implementsFunction = (x, fn) => typeof x?.[fn] === \"function\";\nexport {\n  implementsFunction\n};\n", "import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nconst ensureTransducer = (x) => implementsFunction(x, \"xform\") ? x.xform() : x;\nexport {\n  ensureTransducer\n};\n", "const isIterable = (x) => typeof x?.[Symbol.iterator] === \"function\";\nexport {\n  isIterable\n};\n", "const identity = (x) => x;\nconst always = () => true;\nconst never = () => false;\nexport {\n  always,\n  identity,\n  never\n};\n", "class Reduced {\n  value;\n  constructor(val) {\n    this.value = val;\n  }\n  deref() {\n    return this.value;\n  }\n}\nconst reduced = (x) => new Reduced(x);\nconst isReduced = (x) => x instanceof Reduced;\nconst ensureReduced = (x) => x instanceof Reduced ? x : new Reduced(x);\nconst unreduced = (x) => x instanceof Reduced ? x.deref() : x;\nexport {\n  Reduced,\n  ensureReduced,\n  isReduced,\n  reduced,\n  unreduced\n};\n", "import { identity } from \"@thi.ng/api/fn\";\nimport { implementsFunction } from \"@thi.ng/checks/implements-function\";\nimport { isArrayLike } from \"@thi.ng/checks/is-arraylike\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { isReduced, unreduced } from \"./reduced.js\";\nconst __parseArgs = (args) => args.length === 2 ? [void 0, args[1]] : args.length === 3 ? [args[1], args[2]] : illegalArity(args.length);\nfunction reduce(...args) {\n  const rfn = args[0];\n  const init = rfn[0];\n  const complete = rfn[1];\n  const reduce2 = rfn[2];\n  args = __parseArgs(args);\n  const acc = args[0] == null ? init() : args[0];\n  const src = args[1];\n  return unreduced(\n    complete(\n      implementsFunction(src, \"$reduce\") ? src.$reduce(reduce2, acc) : isArrayLike(src) ? __reduceArray(reduce2, acc, src) : __reduceIterable(reduce2, acc, src)\n    )\n  );\n}\nfunction reduceRight(...args) {\n  const [init, complete, reduce2] = args[0];\n  args = __parseArgs(args);\n  let acc = args[0] == null ? init() : args[0];\n  const src = args[1];\n  for (let i = src.length; i-- > 0; ) {\n    acc = reduce2(acc, src[i]);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return unreduced(complete(acc));\n}\nconst __reduceArray = (rfn, acc, src) => {\n  for (let i = 0, n = src.length; i < n; i++) {\n    acc = rfn(acc, src[i]);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return acc;\n};\nconst __reduceIterable = (rfn, acc, src) => {\n  for (let x of src) {\n    acc = rfn(acc, x);\n    if (isReduced(acc)) {\n      acc = acc.deref();\n      break;\n    }\n  }\n  return acc;\n};\nconst reducer = (init, rfn) => [init, identity, rfn];\nconst $$reduce = (rfn, args) => {\n  const n = args.length - 1;\n  return isIterable(args[n]) ? args.length > 1 ? reduce(rfn.apply(null, args.slice(0, n)), args[n]) : reduce(rfn(), args[0]) : void 0;\n};\nexport {\n  $$reduce,\n  reduce,\n  reduceRight,\n  reducer\n};\n", "import { reducer } from \"./reduce.js\";\nfunction push(src) {\n  return src ? [...src] : reducer(\n    () => [],\n    (acc, x) => (acc.push(x), acc)\n  );\n}\nexport {\n  push\n};\n", "import { NO_OP, SEMAPHORE } from \"@thi.ng/api/api\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { push } from \"./push.js\";\nimport { isReduced, unreduced } from \"./reduced.js\";\nfunction* iterator(xform, src) {\n  const rfn = ensureTransducer(xform)(push());\n  const complete = rfn[1];\n  const reduce = rfn[2];\n  for (let x of src) {\n    const y = reduce([], x);\n    if (isReduced(y)) {\n      yield* unreduced(complete(y.deref()));\n      return;\n    }\n    if (y.length) {\n      yield* y;\n    }\n  }\n  yield* unreduced(complete([]));\n}\nfunction* iterator1(xform, src) {\n  const reduce = ensureTransducer(xform)([NO_OP, NO_OP, (_, x) => x])[2];\n  for (let x of src) {\n    let y = reduce(SEMAPHORE, x);\n    if (isReduced(y)) {\n      y = unreduced(y.deref());\n      if (y !== SEMAPHORE) {\n        yield y;\n      }\n      return;\n    }\n    if (y !== SEMAPHORE) {\n      yield y;\n    }\n  }\n}\nconst __iter = (xform, args, impl = iterator1) => {\n  const n = args.length - 1;\n  return isIterable(args[n]) ? args.length > 1 ? impl(xform.apply(null, args.slice(0, n)), args[n]) : impl(xform(), args[0]) : void 0;\n};\nexport {\n  __iter,\n  iterator,\n  iterator1\n};\n", "const compR = (rfn, fn) => [rfn[0], rfn[1], fn];\nexport {\n  compR\n};\n", "import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator } from \"./iterator.js\";\nimport { ensureReduced, reduced } from \"./reduced.js\";\nfunction take(n, src) {\n  return isIterable(src) ? iterator(take(n), src) : (rfn) => {\n    const r = rfn[2];\n    let m = n;\n    return compR(\n      rfn,\n      (acc, x) => --m > 0 ? r(acc, x) : m === 0 ? ensureReduced(r(acc, x)) : reduced(acc)\n    );\n  };\n}\nexport {\n  take\n};\n", "/**\n * @logue/reverb\n *\n * @description JavaScript Reverb effect class\n * @author Logue <logue@hotmail.co.jp>\n * @copyright 2019-2025 By Masashi Yoshikawa All rights reserved.\n * @license MIT\n * @version 1.3.16\n * @see {@link https://github.com/logue/Reverb.js}\n */\n\nimport { white as c, violet as m, red as f, pink as b, green as N, blue as g } from \"@thi.ng/colored-noise\";\nimport { take as v } from \"@thi.ng/transducers\";\nimport { SYSTEM as w } from \"@thi.ng/random\";\nconst d = {\n  version: \"1.3.16\",\n  date: \"2025-03-30T16:28:39.195Z\"\n}, o = {\n  /** Blue noise */\n  blue: \"blue\",\n  /** Brown noise (same as red noise) */\n  brown: \"red\",\n  /** Green noise */\n  green: \"green\",\n  /** Pink noise */\n  pink: \"pink\",\n  /** Red noise */\n  red: \"red\",\n  /** Violet noise */\n  violet: \"violet\"\n}, y = {\n  noise: \"white\",\n  scale: 1,\n  peaks: 2,\n  randomAlgorithm: w,\n  decay: 2,\n  delay: 0,\n  reverse: !1,\n  time: 2,\n  filterType: \"allpass\",\n  filterFreq: 2200,\n  filterQ: 1,\n  mix: 0.5,\n  once: !1\n};\nclass s {\n  /** Version strings */\n  static version = d.version;\n  /** Build date */\n  static build = d.date;\n  /** AudioContext */\n  ctx;\n  /** Wet Level (Reverberated node) */\n  wetGainNode;\n  /** Dry Level (Original sound node) */\n  dryGainNode;\n  /** Impulse response filter */\n  filterNode;\n  /** Convolution node for applying impulse response */\n  convolverNode;\n  /** Output gain node */\n  outputNode;\n  /** Option */\n  options;\n  /** Connected flag */\n  isConnected;\n  /** Noise Generator */\n  noise = c;\n  /**\n   * Constructor\n   *\n   * @param ctx - Root AudioContext\n   * @param options - Configure\n   */\n  constructor(e, t) {\n    this.ctx = e, this.options = Object.assign(y, t), this.wetGainNode = this.ctx.createGain(), this.dryGainNode = this.ctx.createGain(), this.filterNode = this.ctx.createBiquadFilter(), this.convolverNode = this.ctx.createConvolver(), this.outputNode = this.ctx.createGain(), this.isConnected = !1, this.filterType(this.options.filterType), this.setNoise(this.options.noise), this.buildImpulse(), this.mix(this.options.mix);\n  }\n  /**\n   * Connect the node for the reverb effect to the original sound node.\n   *\n   * @param sourceNode - Input source node\n   */\n  connect(e) {\n    return this.isConnected && this.options.once ? (this.isConnected = !1, this.outputNode) : (this.convolverNode.connect(this.filterNode), this.filterNode.connect(this.wetGainNode), e.connect(this.convolverNode), e.connect(this.dryGainNode).connect(this.outputNode), e.connect(this.wetGainNode).connect(this.outputNode), this.isConnected = !0, this.outputNode);\n  }\n  /**\n   * Disconnect the reverb node\n   *\n   * @param sourceNode - Input source node\n   */\n  disconnect(e) {\n    return this.isConnected && (this.convolverNode.disconnect(this.filterNode), this.filterNode.disconnect(this.wetGainNode)), this.isConnected = !1, e;\n  }\n  /**\n   * Dry/Wet ratio\n   *\n   * @param mix - Ratio (0~1)\n   */\n  mix(e) {\n    if (!s.inRange(e, 0, 1))\n      throw new RangeError(\"[Reverb.js] Dry/Wet ratio must be between 0 to 1.\");\n    this.options.mix = e, this.dryGainNode.gain.value = 1 - this.options.mix, this.wetGainNode.gain.value = this.options.mix;\n  }\n  /**\n   * Set Impulse Response time length (second)\n   *\n   * @param value - IR length\n   */\n  time(e) {\n    if (!s.inRange(e, 1, 50))\n      throw new RangeError(\n        \"[Reverb.js] Time length of inpulse response must be less than 50sec.\"\n      );\n    this.options.time = e, this.buildImpulse();\n  }\n  /**\n   * Impulse response decay rate.\n   *\n   * @param value - Decay value\n   */\n  decay(e) {\n    if (!s.inRange(e, 0, 100))\n      throw new RangeError(\n        \"[Reverb.js] Inpulse Response decay level must be less than 100.\"\n      );\n    this.options.decay = e, this.buildImpulse();\n  }\n  /**\n   * Delay before reverberation starts\n   *\n   * @param value - Time[ms]\n   */\n  delay(e) {\n    if (!s.inRange(e, 0, 100))\n      throw new RangeError(\n        \"[Reverb.js] Inpulse Response delay time must be less than 100.\"\n      );\n    this.options.delay = e, this.buildImpulse();\n  }\n  /**\n   * Reverse the impulse response.\n   *\n   * @param reverse - Reverse IR\n   */\n  reverse(e) {\n    this.options.reverse = e, this.buildImpulse();\n  }\n  /**\n   * Filter for impulse response\n   *\n   * @param type - Filiter Type\n   */\n  filterType(e = \"allpass\") {\n    this.filterNode.type = this.options.filterType = e;\n  }\n  /**\n   * Filter frequency applied to impulse response\n   *\n   * @param freq - Frequency\n   */\n  filterFreq(e) {\n    if (!s.inRange(e, 20, 2e4))\n      throw new RangeError(\n        \"[Reverb.js] Filter frequrncy must be between 20 and 20000.\"\n      );\n    this.options.filterFreq = e, this.filterNode.frequency.value = this.options.filterFreq;\n  }\n  /**\n   * Filter quality.\n   *\n   * @param q - Quality\n   */\n  filterQ(e) {\n    if (!s.inRange(e, 0, 10))\n      throw new RangeError(\n        \"[Reverb.js] Filter Q value must be between 0 and 10.\"\n      );\n    this.options.filterQ = e, this.filterNode.Q.value = this.options.filterQ;\n  }\n  /**\n   * set IR source noise peaks\n   *\n   * @param p - Peaks\n   */\n  peaks(e) {\n    this.options.peaks = e, this.buildImpulse();\n  }\n  /**\n   * set IR source noise scale.\n   *\n   * @param s - Scale\n   */\n  scale(e) {\n    this.options.scale = e, this.buildImpulse();\n  }\n  /**\n   * set IR source noise generator.\n   *\n   * @param a - Algorithm\n   */\n  randomAlgorithm(e) {\n    this.options.randomAlgorithm = e, this.buildImpulse();\n  }\n  /**\n   * Inpulse Response Noise algorithm.\n   *\n   * @param type - IR noise algorithm type.\n   */\n  setNoise(e) {\n    switch (this.options.noise = e, e) {\n      case o.blue:\n        this.noise = g;\n        break;\n      case o.green:\n        this.noise = N;\n        break;\n      case o.pink:\n        this.noise = b;\n        break;\n      case o.red:\n      case o.brown:\n        this.noise = f;\n        break;\n      case o.violet:\n        this.noise = m;\n        break;\n      default:\n        this.noise = c;\n    }\n    this.buildImpulse();\n  }\n  /**\n   * Set Random Algorythm\n   *\n   * @param algorithm - Algorythm\n   */\n  setRandomAlgorythm(e) {\n    this.options.randomAlgorithm = e, this.buildImpulse();\n  }\n  /**\n   * Return true if in range, otherwise false\n   *\n   * @param x - Target value\n   * @param min - Minimum value\n   * @param max - Maximum value\n   */\n  static inRange(e, t, n) {\n    return (e - t) * (e - n) <= 0;\n  }\n  /** Utility function for building an impulse response from the module parameters. */\n  buildImpulse() {\n    const e = this.ctx.sampleRate, t = Math.max(e * this.options.time, 1), n = e * this.options.delay, a = this.ctx.createBuffer(2, t, e), l = new Float32Array(t), h = new Float32Array(t), p = this.getNoise(t), u = this.getNoise(t);\n    for (let i = 0; i < t; i++) {\n      let r = 0;\n      i < n ? (l[i] = 0, h[i] = 0, r = this.options.reverse ?? !1 ? t - (i - n) : i - n) : r = this.options.reverse ?? !1 ? t - i : i, l[i] = (p[i] ?? 0) * (1 - r / t) ** this.options.decay, h[i] = (u[i] ?? 0) * (1 - r / t) ** this.options.decay;\n    }\n    a.getChannelData(0).set(l), a.getChannelData(1).set(h), this.convolverNode.buffer = a;\n  }\n  /**\n   * Noise source\n   *\n   * @param duration - length of IR.\n   */\n  getNoise(e) {\n    return [\n      ...v(\n        e,\n        this.noise({\n          bins: this.options.peaks,\n          scale: this.options.scale,\n          rnd: this.options.randomAlgorithm\n        })\n      )\n    ];\n  }\n}\nexport {\n  s as default\n};\n", "import Reverb from '@logue/reverb';\r\nimport Parser from './parser.ts';\r\nimport SynthesizerNote from './sound_font_synth_note.ts';\r\n\r\ntype Mode = 'GM' | 'GM2' | 'XG' | 'GS';\r\n\r\ninterface BankSet {\r\n  [key: number]: {\r\n    [key: number]: {\r\n      name: string;\r\n      [key: number]: {\r\n        sample: Uint8Array;\r\n        sampleRate: number;\r\n        sampleModes: number;\r\n        basePlaybackRate: number;\r\n        modEnvToPitch: number;\r\n        scaleTuning: number;\r\n        start: number;\r\n        end: number;\r\n        loopStart: number;\r\n        loopEnd: number;\r\n        volDelay: number;\r\n        volAttack: number;\r\n        volHold: number;\r\n        volDecay: number;\r\n        volSustain: number;\r\n        volRelease: number;\r\n        modDelay: number;\r\n        modAttack: number;\r\n        modHold: number;\r\n        modDecay: number;\r\n        modSustain: number;\r\n        modRelease: number;\r\n        initialFilterFc: number;\r\n        modEnvToFilterFc: number;\r\n        initialFilterQ: number;\r\n        reverbEffectSend: number;\r\n        initialAttenuation: number;\r\n        freqVibLFO: number;\r\n        pan: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * Synthesizer Class\r\n *\r\n * @author imaya\r\n */\r\nexport default class Synthesizer {\r\n  private input: Uint8Array;\r\n  private parser: Parser | null;\r\n  private bank: number;\r\n  private bankSet: BankSet;\r\n  private bufferSize: number;\r\n  private ctx: AudioContext;\r\n  private gainMaster: GainNode;\r\n  private bufSrc: AudioBufferSourceNode;\r\n  private channelInstrument: number[];\r\n  private channelBank: number[];\r\n  private channelVolume: number[];\r\n  private channelPanpot: number[];\r\n  private channelPitchBend: number[];\r\n  private channelPitchBendSensitivity: number[];\r\n  private channelExpression: number[];\r\n  private channelAttack: number[];\r\n  private channelDecay: number[];\r\n  private channelSustin: number[];\r\n  private channelRelease: number[];\r\n  private channelHold: boolean[];\r\n  private channelHarmonicContent: number[];\r\n  private channelCutOffFrequency: number[];\r\n  private mode: Mode;\r\n  private programSet: string[][];\r\n  private channelMute: boolean[];\r\n  private currentNoteOn: SynthesizerNote[][];\r\n  private baseVolume: number;\r\n  private masterVolume: number;\r\n  private percussionPart: boolean[];\r\n  private percussionVolume: number[];\r\n  private reverb: Reverb[];\r\n  private modulation: number[];\r\n  private filter: BiquadFilterNode[];\r\n  private items: string[];\r\n  private intersection: IntersectionObserver;\r\n  private timer: NodeJS.Timeout | null;\r\n  private drag: boolean;\r\n  private element: HTMLElement | null;\r\n\r\n  constructor(input: Uint8Array) {\r\n    this.input = input;\r\n    this.parser = null;\r\n    this.bank = 0;\r\n    this.bankSet = {};\r\n    this.bufferSize = 2048;\r\n    this.ctx = this.getAudioContext();\r\n    this.gainMaster = this.ctx.createGain();\r\n    this.bufSrc = this.ctx.createBufferSource();\r\n    this.channelInstrument = new Array(16).fill(0);\r\n    this.channelBank = new Array(16).fill(0);\r\n    this.channelBank[9] = 127; // Channel 10 is percussion\r\n    this.channelVolume = new Array(16).fill(100);\r\n    this.channelPanpot = new Array(16).fill(64);\r\n    this.channelPitchBend = new Array(16).fill(0);\r\n    this.channelPitchBendSensitivity = new Array(16).fill(2);\r\n    this.channelExpression = new Array(16).fill(127);\r\n    this.channelAttack = new Array(16).fill(64);\r\n    this.channelDecay = new Array(16).fill(64);\r\n    this.channelSustin = new Array(16).fill(64);\r\n    this.channelRelease = new Array(16).fill(64);\r\n    this.channelHold = new Array(16).fill(false);\r\n    this.channelHarmonicContent = new Array(16).fill(64);\r\n    this.channelCutOffFrequency = new Array(16).fill(64);\r\n    this.mode = 'GM2';\r\n    this.programSet = [];\r\n    this.channelMute = new Array(16).fill(false);\r\n    this.currentNoteOn = Array.from({ length: 16 }, () => []);\r\n    this.baseVolume = 1 / 0xffff;\r\n    this.masterVolume = 16384;\r\n    this.percussionPart = new Array(16).fill(false);\r\n    this.percussionPart[9] = true; // Channel 10 is percussion\r\n    this.percussionVolume = new Array(128).fill(127);\r\n    this.reverb = [];\r\n    this.modulation = new Array(16).fill(0);\r\n    this.filter = [];\r\n    this.items = [];\r\n    this.intersection = new IntersectionObserver(\r\n      entries => {\r\n        entries.forEach(entry => {\r\n          if (entry.target instanceof HTMLElement) {\r\n            entry.target.dataset.isIntersecting = entry.isIntersecting.toString();\r\n          }\r\n        });\r\n      },\r\n      {}\r\n    );\r\n    this.timer = null;\r\n    this.drag = false;\r\n    this.element = null;\r\n\r\n    // Initialize reverb and filter for each channel\r\n    for (let i = 0; i < 16; ++i) {\r\n      this.reverb[i] = new Reverb(this.ctx, { noise: 'violet' });\r\n      this.filter[i] = this.ctx.createBiquadFilter();\r\n    }\r\n  }\r\n\r\n  private getAudioContext(): AudioContext {\r\n    const ctx = new AudioContext();\r\n\r\n    // Defreeze AudioContext for iOS\r\n    const initAudioContext = () => {\r\n      document.removeEventListener('touchstart', initAudioContext);\r\n      const emptySource = ctx.createBufferSource();\r\n      emptySource.start();\r\n      emptySource.stop();\r\n    };\r\n\r\n    document.addEventListener('touchstart', initAudioContext);\r\n\r\n    return ctx;\r\n  }\r\n\r\n  // ... rest of the methods with proper TypeScript types ...\r\n} ", "import Synthesizer from './sound_font_synth.ts';\r\n\r\ninterface Bank {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface Program {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n/**\r\n * Reads a File object and returns its contents as an ArrayBuffer\r\n * @param file The File object to read\r\n * @returns Promise that resolves to an ArrayBuffer\r\n */\r\nfunction readFileAsArrayBuffer(file: File): Promise<ArrayBuffer> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => reader.result instanceof ArrayBuffer ?\r\n      resolve(reader.result) :\r\n      reject(new TypeError('File reader did not yield ArrayBuffer.'));\r\n    reader.onerror = error => reject(error);\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetches a resource from a URL and returns it as an ArrayBuffer\r\n * @param url The URL to fetch from\r\n * @returns Promise that resolves to an ArrayBuffer\r\n */\r\nasync function fetchResourceAsArrayBuffer(url: string): Promise<ArrayBuffer> {\r\n  const response = await fetch(url);\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Did not get an OK response when fetching resource.');\r\n  }\r\n\r\n  const arrayBuffer = await response.arrayBuffer();\r\n\r\n  return arrayBuffer;\r\n}\r\n\r\n/**\r\n * Waits for a reference to be defined\r\n * @param ref The reference to wait for\r\n * @returns Promise that resolves when the reference is defined\r\n */\r\nconst waitForReference = <T>(ref: T): Promise<void> => new Promise(resolve => {\r\n  const iid = setInterval(() => {\r\n    if (ref !== undefined) {\r\n      clearInterval(iid);\r\n      resolve();\r\n    }\r\n  }, 16);\r\n});\r\n\r\nexport default class SoundFont {\r\n  private synth?: Synthesizer;\r\n  private _channel: number = 0;\r\n  private _bankIndex: number = 0;\r\n  private _programIndex: number = 0;\r\n\r\n  set channel(channel: number) {\r\n    this._channel = channel;\r\n  }\r\n\r\n  /**\r\n   * Loads a SoundFont from a File object\r\n   * @param file The File object containing the SoundFont\r\n   * @returns Promise that resolves when loading is complete\r\n   */\r\n  async loadSoundFontFromFile(file: File): Promise<void> {\r\n    const arrayBuffer = await readFileAsArrayBuffer(file);\r\n    await this.bootSynth(arrayBuffer);\r\n  }\r\n\r\n  /**\r\n   * Loads a SoundFont from a URL\r\n   * @param url The URL of the SoundFont\r\n   * @returns Promise that resolves when loading is complete\r\n   */\r\n  async loadSoundFontFromURL(url: string): Promise<void> {\r\n    const arrayBuffer = await fetchResourceAsArrayBuffer(url);\r\n    await this.bootSynth(arrayBuffer);\r\n  }\r\n\r\n  set bank(index: number) {\r\n    this._bankIndex = index;\r\n    if (this.synth) {\r\n      this.synth.bankChange(this._channel, index);\r\n    }\r\n  }\r\n\r\n  get banks(): Bank[] {\r\n    if (!this.synth?.programSet) {\r\n      return [];\r\n    }\r\n    return Object.keys(this.synth.programSet).map(id => ({\r\n      id,\r\n      name: ('000' + parseInt(id, 10)).slice(-3)\r\n    }));\r\n  }\r\n\r\n  set program(index: number) {\r\n    this._programIndex = index;\r\n    if (this.synth) {\r\n      this.synth.programChange(this._channel, index);\r\n    }\r\n  }\r\n\r\n  get programs(): Program[] {\r\n    if (!this.synth?.programSet || !this.synth.programSet[this._bankIndex]) {\r\n      return [];\r\n    }\r\n    const { programSet } = this.synth;\r\n\r\n    return Object.keys(programSet[this._bankIndex]).map(id => ({\r\n      id,\r\n      name: ('000' + (parseInt(id, 10) + 1)).slice(-3) + ':' + programSet[this._bankIndex][id]\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Initializes the synthesizer with the provided SoundFont data\r\n   * @param arrayBuffer The SoundFont data as an ArrayBuffer\r\n   * @returns Promise that resolves when initialization is complete\r\n   */\r\n  async bootSynth(arrayBuffer: ArrayBuffer): Promise<void> {\r\n    const input = new Uint8Array(arrayBuffer);\r\n\r\n    if (this.synth) {\r\n      this.synth.refreshInstruments(input);\r\n    } else {\r\n      this.synth = new Synthesizer(input);\r\n\r\n      this.synth.init();\r\n      this.synth.start();\r\n\r\n      await waitForReference(this.synth.programSet);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers a note on event\r\n   * @param midiNumber The MIDI note number\r\n   * @param velocity The velocity of the note (0-127)\r\n   * @param channel The MIDI channel to use (optional)\r\n   */\r\n  noteOn(midiNumber: number, velocity: number = 127, channel?: number): void {\r\n    if (this.synth) {\r\n      this.synth.noteOn(channel ?? this._channel, midiNumber, velocity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers a note off event\r\n   * @param midiNumber The MIDI note number\r\n   * @param velocity The velocity of the note (0-127)\r\n   * @param channel The MIDI channel to use (optional)\r\n   */\r\n  noteOff(midiNumber: number, velocity: number = 127, channel?: number): void {\r\n    if (this.synth) {\r\n      this.synth.noteOff(channel ?? this._channel, midiNumber, velocity);\r\n    }\r\n  }\r\n} "],
  "mappings": "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",
  "names": ["INV_MAX", "ARandom", "norm", "p", "min", "max", "x", "range", "WrappedRandom", "ARandom", "rnd", "norm", "SYSTEM", "WrappedRandom", "DEFAULT_OPTS", "SYSTEM", "preseed", "n", "scale", "rnd", "state", "sum", "src", "sum2", "x", "interleave", "a", "b", "i", "next", "blue", "opts", "bins", "scale", "rnd", "DEFAULT_OPTS", "state", "preseed", "x", "i", "invN", "acc", "sum", "sign", "green", "opts", "interleave", "blue", "ctz32", "x", "c", "pink", "opts", "bins", "scale", "rnd", "DEFAULT_OPTS", "state", "preseed", "invN", "acc", "sum", "i", "id", "ctz32", "red", "opts", "bins", "scale", "rnd", "DEFAULT_OPTS", "state", "preseed", "invN", "acc", "sum", "i", "violet", "opts", "interleave", "red", "white", "opts", "scale", "rnd", "DEFAULT_OPTS", "implementsFunction", "x", "fn", "ensureTransducer", "x", "implementsFunction", "isIterable", "x", "identity", "x", "Reduced", "val", "reduced", "x", "isReduced", "ensureReduced", "unreduced", "reducer", "init", "rfn", "identity", "push", "src", "reducer", "acc", "x", "iterator", "xform", "src", "rfn", "ensureTransducer", "push", "complete", "reduce", "x", "y", "isReduced", "unreduced", "compR", "rfn", "fn", "take", "n", "src", "isIterable", "iterator", "rfn", "m", "compR", "acc", "x", "ensureReduced", "reduced", "d", "o", "y", "SYSTEM", "s", "_s", "white", "t", "blue", "green", "pink", "red", "violet", "n", "a", "l", "h", "p", "u", "i", "r", "take", "Synthesizer", "input", "entries", "entry", "i", "s", "ctx", "initAudioContext", "emptySource", "readFileAsArrayBuffer", "file", "resolve", "reject", "reader", "error", "fetchResourceAsArrayBuffer", "url", "response", "waitForReference", "ref", "iid", "SoundFont", "channel", "arrayBuffer", "index", "id", "programSet", "input", "Synthesizer", "midiNumber", "velocity"]
}
